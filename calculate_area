function [area] = calc_surfacearea(data_id, threshold, compression_ratio)

    % function: for an image, calculate 2D surface area
    % ---------------------------------------------
    % parameters: 
    % @data_id: 
    % @threshold: [0,1], best value is 0.1
    % @compression_ratio: [0, 100], best value is 5.
    % ---------------------------------------------
    % returns:
    % @area: area in number of pixels. conversion according to
    % scan resolution.
    
    % read & prepare image from path
    conn = database('limsdb','lims','mou53Brains!');
    curs = exec(conn,[]);
    sql = ['SELECT primary_file_system_location_lossy FROM data_file WHERE id = "' num2str(data_id) '"'];
    curs = exec(conn,sql);
    curs = fetch(curs);
    imagefilename = curs.Data;
    path = strcat('Z:\Converted Image Data\', imagefilename);
    image_raw = imread(char(path));

    % basic image preprocessing
    image_uint8 = uint8(image_raw);  
    image_uint8(:,:,3) = 0; % remove noise in blue channel
    image_gray = rgb2gray(image_uint8); % convert to grayscale for thresholding
    image_bw = im2bw(image_gray, threshold);

    % denoise through erode; regenerate through dilate
    se = strel('rectangle',[40 40]);
    image_bw_1 = imerode(image_bw,se);
    image_bw_2 = imdilate(image_bw_1,se);

    % smooth boundaries via disk structuring element
    se = strel('disk',20);
    image_bw_3 = imdilate(image_bw_2,se);
    image_bw_4 = imdilate(image_bw_3,se);

    image_bw_5 = imfill(image_bw_4, 'holes'); % fill in holes, if any

    % identify and characterize objects 
    [labels, ~] = bwlabel(image_bw_5);
    object_details = regionprops(labels, 'Area');
    
    % extract large objects
    idx = find([object_details.Area] > 1000000);
    image_mask_1 = ismember(labels,idx);
    image_mask_2 = image_bw .* image_mask_1;
    
    % calculate area
    area = sum(image_mask_2(:));
    
    % save cropped & original images for visual inspection
    cropped_filename = strcat(int2str(data_id), '_cropped_','.jpg');
    imwrite(image_mask_2, cropped_filename, 'jpg', 'Quality', compression_ratio);

    original_filename = strcat(int2str(data_id), '_original_','.jpg');
    imwrite(image_uint8, original_filename, 'jpg', 'Quality', compression_ratio);

end