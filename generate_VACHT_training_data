% function compares green/red actual predictions

for q = 1:length(list_of_data_id)

    conn = database('limsdb','lims','mou53Brains!');

    data_id = list_of_data_id(q);

    % query limsdb for TMR
    sql = ['SELECT click_location_x_coordinate, click_location_y_coordinate, counter_id FROM limsdb.data_file_click where (counter_id = 1 OR counter_id =3) and data_file_id = "' num2str(data_id) '"'];
    curs = exec(conn,sql);
    curs = fetch(curs);
    red_coordinates = curs.Data;

    % query limsdb for VACHT
    sql = ['SELECT click_location_x_coordinate, click_location_y_coordinate, counter_id FROM limsdb.data_file_click where (counter_id = 2 OR counter_id =4) and data_file_id = "' num2str(data_id) '"'];
    curs = exec(conn,sql);
    curs = fetch(curs);
    green_coordinates = curs.Data;

    a = length(red_coordinates); % length returns greater of nrows or ncols
    b = length(green_coordinates);

    % preallocate arrays
    x = zeros(a, 1);
    y = zeros(a, 1);
    is_match = zeros(a, 1);

    for i = 1:a

        % for each actual point...
        red_point = cell2mat(red_coordinates(i,1:2));

        % ...compare against predictions
        for j = 1:b
            green_point = cell2mat(green_coordinates(j,1:2));
            match = 0;

            % if actual point is within 200 pixels of prediction, then there is a match
            distance = pdist([red_point; green_point], 'euclidean');
            if distance < 100
                match = 1;
                break % if there is a match, move on to next actual point
            end

        end

        % recreate list of red points, this time with match
        x(i) = red_point(1);
        y(i) = red_point(2);
        is_match(i) = match;
    end

    % zip and write to csvs
    combined_coordinates = cat(2, x, y, is_match);
    % csvwrite('red_green_comparison.csv', combined_coordinates)


    %% visual inspection of matches and non-matches
    % read image into memory



    sql = ['SELECT primary_file_system_location_lossy FROM data_file WHERE id = "' num2str(data_id) '"'];
    curs = exec(conn,sql);
    curs = fetch(curs);
    filename = curs.Data;
    path = strcat('Z:\Converted Image Data\', filename);

    image_jp2 = imread(char(path));
    image_tif = uint8(image_jp2);

    %% visual inspection of tiles

    d = 25;

    for i = 1:length(combined_coordinates)

        a = combined_coordinates(i, 1);
        b = combined_coordinates(i, 2);

        % 1 = agreement between red and green channels
        % 0 = no agreement between red and green channels    
        if combined_coordinates(i,3) == 1

            tile = image_tif( b-d: b +d, a - d: a + d,:);  

            % improve visual contrast by boosting green channel
            tile(:,:,1) = 0;
            tile(:,:,3) = 0;
            type = 'positive';
            filename = strcat(type, int2str(data_id), '_', int2str(i),'.tif');
            imwrite(tile, filename, 'tif');    
        else

            tile = image_tif( b-d: b +d, a - d: a + d,:);  

            % improve visual contrast by boosting green channel
            tile(:,:,1) = 0;
            tile(:,:,3) = 0;
            type = 'negative';
            filename = strcat(type, int2str(data_id), '_', int2str(i),'.tif');
            imwrite(tile, filename, 'tif');    

        end
    end
end