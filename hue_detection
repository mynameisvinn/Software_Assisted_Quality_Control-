%% nmj detection
tic
im1 = imread('test2.tif');

% convert from rgb to hue, saturation and value
im2 = rgb2hsv(im1);

% 1st plane is hue (2nd is saturation and 3rd is value)
% https://www.mathworks.com/help/matlab/ref/rgb2hsv.html
im3 = im2(:,:,1);

% convert to a hue angle
% https://www.mathworks.com/matlabcentral/answers/8058-hue-value-of-image-image-processing-in-matlab-rgb-to-hsv
im4 = im3 .* 360;

% recast im4 to int8
im5 = uint8(im4);

% create mask for orange hue, which falls between hue values of [30,60]
% http://www.color-blindness.com/color-name-hue/
im6 = (im5 < 60) &(im5 > 30);

% invert mask 
im7 = imcomplement(im6);
im8 = uint8(im7);

% subset red channel
j1 = im1(:,:,1);

% retain regions that satisfy hue mask
% j2 image satisfies hue condition
% compare j2 with original image to determine if misses are due to (1)
% poor detection or (2) subsetting conditions
j2 = j1 .* im8;

% create green mask to exclude yellow FPs
g1 = im1(:,:,2);
g2 = g1 < 200;
g3 = uint8(g2);

% g4 image satisfies hue condition AND green condition
% green condition eliminates yellow FPs
g4 = j2 .* g3;

% look for high intensity areas of g5, which is the red channel
% g5 image is a mask for counting
% absolute threshold versus relative threshold
g5 = g4 > 200;

% counting
% for weightedcentroids => mask (must be logic) first, followed by red channel
s = regionprops(g5, g4, 'WeightedCentroid', 'Area')

% remove small flecks
s2 = s([s.Area] >50)

% manual inspection of predictions
figure, imshowpair(im1, im1, 'montage')

for i = 1:length(s2)
    viscircles(s2(i).WeightedCentroid, 5, 'EdgeColor', 'b')
end

toc

%% create tiles
for i = 1:length(s2)
    a = round(s2(i).WeightedCentroid(1));
    b = round(s2(i).WeightedCentroid(2));
    tile = im1( b-50: b +50, a - 50: a + 50,:);
    filename = strcat(int2str(i),'.jpg')
    imwrite(tile, filename, 'jpg');
end